
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
platform.on("FVCampaignCreated", async (newCampaign: string, founder: string, token: string, goal: bigint) => {
  log(`üéâ –ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è: ${newCampaign} (token=${token})`);

  const isEth = token === ethers.ZeroAddress;
  const abi = isEth ? CampaignETH : CampaignERC20;
  const contractPath = isEth 
    ? "contracts/modules/campaigns/CampaignNative.sol/CampaignNative.json"
    : "contracts/modules/campaigns/CampaignToken.sol/CampaignToken.json";
  const contractName = isEth 
    ? "contracts/modules/campaigns/CampaignNative.sol:CampaignNative"
    : "contracts/modules/campaigns/CampaignToken.sol:CampaignToken";

  try {
    const campaign = new ethers.Contract(newCampaign, abi, provider);
    const summary = await campaign.getSummary();
    const fee = await campaign.platformFee();

    const constructorArgs = isEth
      ? [PLATFORM_ADDRESS, summary._creator, summary._id, summary._goal, summary._deadline, summary._campaignMeta, fee]
      : [PLATFORM_ADDRESS, summary._creator, summary._id, summary._goal, summary._deadline, summary._campaignMeta, fee, summary._token];

    await verifyContractWithRetry(newCampaign, contractPath, contractName, abi, constructorArgs);
  } catch (err: any) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${newCampaign}: ${err.message}`);
  }
});

log("üöÄ Verification server started. Listening for FVCampaignCreated...");
