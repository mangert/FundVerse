//—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–æ–¥–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
import { ethers } from 'hardhat';
import { readFileSync } from 'fs';
import { join } from 'path';

async function main() {
    console.log("Token DEPLOYING...");
    const token_Factory = await ethers.getContractFactory("TestTokenERC20");
    const token = await token_Factory.deploy();
    token.waitForDeployment();
    const tokenAddr = await token.getAddress();        
    console.log("Token deployed at ", tokenAddr);
  
    console.log('üöÄ Adding token...');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º ABI
  const abiPath = join(__dirname, './../../front/src/contracts/abis/Platform.json');
  const abi = JSON.parse(readFileSync(abiPath, 'utf8'));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
  const addressesPath = join(__dirname, './../../front/src/contracts/addresses.hardhat.json');
  const addresses = JSON.parse(readFileSync(addressesPath, 'utf8'));
  
  const [deployer, user] = await ethers.getSigners();
  console.log('Using account:', deployer.address);
  console.log('Platform address:', addresses.platform);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ ethers
  const platform = new ethers.Contract(
    addresses.platform,
    abi,
    deployer
  );

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏ - –¥–µ–ø–æ–∑–∏—Ç
  const tx = await platform.addTokenToAllowed(tokenAddr);
  console.log('üì¶ Transaction sent:', tx.hash);
  
  // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  console.log('‚è≥ Waiting for confirmation...');
  const receipt = await tx.wait();
  console.log('‚úÖ Transaction confirmed in block:', receipt?.blockNumber);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });

