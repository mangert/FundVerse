import { useEffect, useRef } from 'react';
import { usePublicClient } from 'wagmi';
import { PlatformABI } from '../utils/abi';
import { PLATFORM_ADDRESS } from '../utils/addresses';
import { decodeEventLog } from 'viem';
import { useNotifications } from '../contexts/NotificationContext';

export const usePlatformEvents = (onCampaignCreated?: (event: any) => void) => {
  const publicClient = usePublicClient();
  const { addNotification } = useNotifications();
  const lastProcessedBlock = useRef<bigint>(0n);
  const pollingInterval = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!publicClient) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    const initPolling = async () => {
      try {
        const currentBlock = await publicClient.getBlockNumber();
        lastProcessedBlock.current = currentBlock;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 5 —Å–µ–∫—É–Ω–¥
        pollingInterval.current = setInterval(pollNewEvents, 5000);
      } catch (error) {
        console.error('Error initializing event polling:', error);
      }
    };

    const pollNewEvents = async () => {
      try {
        if (!publicClient) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        const currentBlock = await publicClient.getBlockNumber();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤, –≤—ã—Ö–æ–¥–∏–º
        if (currentBlock <= lastProcessedBlock.current) {
          return;
        }

        // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–∞—Ö
        const logs = await publicClient.getLogs({
          address: PLATFORM_ADDRESS,
          event: {
            type: 'event',
            name: 'FVCampaignCreated',
            inputs: [
              { type: 'address', indexed: true, name: 'NewCampaignAddress' },
              { type: 'address', indexed: true, name: 'founder' },
              { type: 'address', indexed: true, name: 'token' },
              { type: 'uint256', name: 'goal' }
            ]
          },
          fromBlock: lastProcessedBlock.current + 1n,
          toBlock: currentBlock
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        for (const log of logs) {
          try {
            const decoded = decodeEventLog({
              abi: PlatformABI,
              data: log.data,
              topics: log.topics,
            }) as unknown as { args: any };

            if (decoded.args?.NewCampaignAddress) {
              const eventData = {
                NewCampaignAddress: decoded.args.NewCampaignAddress,
                founder: decoded.args.founder,
                token: decoded.args.token || '0x0',
                goal: decoded.args.goal
              };

              console.log('Processing new campaign event from block:', log.blockNumber, eventData);
              
              // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
              onCampaignCreated?.(eventData);
              
              // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              addNotification({
                type: 'success',
                message: `üéâ New campaign created: ${eventData.NewCampaignAddress.slice(0, 8)}...`,
                isGlobal: true,
                transactionHash: log.transactionHash
              });
            }
          } catch (error) {
            console.warn('Failed to decode event:', error);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫
        lastProcessedBlock.current = currentBlock;

      } catch (error) {
        console.error('Error polling events:', error);
      }
    };

    initPolling();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (pollingInterval.current) {
        clearInterval(pollingInterval.current);
      }
    };
  }, [publicClient, addNotification, onCampaignCreated]);
};