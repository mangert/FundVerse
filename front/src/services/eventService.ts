import { PlatformABI } from '../utils/abi';
import { PLATFORM_ADDRESS } from '../utils/addresses';

let isPolling = false;
let pollingInterval: NodeJS.Timeout | null = null;
let lastProcessedBlock = 0n;
let notificationCallback: ((notification: any) => void) | null = null;
const processedEvents = new Set<string>();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∏–∑ localStorage
const loadLastBlock = (): bigint => {
  try {
    const stored = localStorage.getItem('last-processed-block');
    return stored ? BigInt(stored) : 0n;
  } catch {
    return 0n;
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –≤ localStorage
const saveLastBlock = (blockNumber: bigint) => {
  try {
    localStorage.setItem('last-processed-block', blockNumber.toString());
  } catch (error) {
    console.warn('Failed to save last block:', error);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
export const initEventService = (publicClient: any, callback: (notification: any) => void) => {
  if (isPolling || !publicClient) return;

  isPolling = true;
  notificationCallback = callback;
  lastProcessedBlock = loadLastBlock();
  
  console.log('Initializing event service with getLogs polling...');
  console.log('Starting from block:', lastProcessedBlock.toString());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const pollEvents = async () => {
    try {
      if (!publicClient) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
      const currentBlock = await publicClient.getBlockNumber();
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤, –≤—ã—Ö–æ–¥–∏–º
      if (currentBlock <= lastProcessedBlock) {
        return;
      }

      // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–∞—Ö
      const logs = await publicClient.getLogs({
        address: PLATFORM_ADDRESS,
        event: {
          type: 'event',
          name: 'FVCampaignCreated',
          inputs: [
            { type: 'address', indexed: true, name: 'NewCampaignAddress' },
            { type: 'address', indexed: true, name: 'founder' },
            { type: 'address', indexed: true, name: 'token' },
            { type: 'uint256', name: 'goal' }
          ]
        },
        fromBlock: lastProcessedBlock > 0n ? lastProcessedBlock + 1n : 'earliest',
        toBlock: currentBlock
      });

      console.log(`Found ${logs.length} new events in blocks ${lastProcessedBlock + 1n}-${currentBlock}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      for (const log of logs) {
        try {
          if (!log.transactionHash || !log.logIndex) continue;

          const eventId = `${log.transactionHash}-${log.logIndex}`;
          
          // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if (processedEvents.has(eventId)) {
            continue;
          }

          processedEvents.add(eventId);
          
          console.log('New campaign event:', eventId);
          
          notificationCallback?.({
            type: 'success',
            message: `üíé New campaign created!`,
            isGlobal: true,
            transactionHash: log.transactionHash
          });

        } catch (error) {
          console.warn('Failed to process event:', error);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫
      if (logs.length > 0) {
        lastProcessedBlock = currentBlock;
        saveLastBlock(lastProcessedBlock);
      }

    } catch (error) {
      console.error('Error polling events:', error);
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –∏ –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  pollEvents();
  pollingInterval = setInterval(pollEvents, 5000);

};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
export const stopEventService = () => {
  if (pollingInterval) {
    clearInterval(pollingInterval);
    pollingInterval = null;
  }
  isPolling = false;
  console.log('Event service stopped');
};

// –û—á–∏—Å—Ç–∫–∞ processed events
export const clearProcessedEvents = () => {
  processedEvents.clear();
  localStorage.removeItem('last-processed-block');
  console.log('Cleared processed events and block history');
};